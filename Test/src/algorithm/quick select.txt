public class QuickSelectExample {
	public static void main(String[] args) {
		int[] arr = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };
		int k = 4; // 要找第 k 小的元素

		int result = quickSelect(arr, 0, arr.length - 1, k - 1);

		System.out.println("第 " + k + " 小的元素是: " + result);
	}

	public static int quickSelect(int[] arr, int left, int right, int k) {
		if (left == right) {
			return arr[left];
		}

		// 使用快速排序中的切割方法
		int pivotIndex = partition(arr, left, right);

		// 如果基準元素的索引等於 k，則找到了第 k 小的元素
		if (pivotIndex == k) {
			return arr[pivotIndex];
		}
		// 如果基準元素的索引大於 k，則在左半部分繼續查找
		else if (pivotIndex > k) {
			return quickSelect(arr, left, pivotIndex - 1, k);
		}
		// 如果基準元素的索引小於 k，則在右半部分繼續查找
		else {
			return quickSelect(arr, pivotIndex + 1, right, k);
		}
	}

	public static int partition(int[] arr, int left, int right) {
		int pivot = arr[right]; // 使用最右邊的元素作為基準
		int i = left - 1; // i 為小於基準的索引位置

		for (int j = left; j < right; j++) {
			if (arr[j] < pivot) {
				i++;
				swap(arr, i, j);
			}
		}

		swap(arr, i + 1, right); // 將基準元素放在正確的位置上
		return i + 1;
	}

	public static void swap(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
}